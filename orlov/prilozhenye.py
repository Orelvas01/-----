import numpy as np
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import filedialog
import os

def simple_linear_regression(x, y):
    x_mean = np.mean(x)
    y_mean = np.mean(y)
    slope = np.sum((x - x_mean) * (y - y_mean)) / np.sum((x - x_mean) ** 2)
    intercept = y_mean - slope * x_mean
    return slope, intercept

def process_mk_file(filepath):
    data = np.loadtxt(filepath)
    omega = data[:, 0]  # –£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (¬∞/—Å)
    voltage = data[:, 1]  # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–º–í)

    # –ú–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    scale = voltage / omega
    avg_scale = np.mean(scale)

    # –ù–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å
    ideal_voltage = avg_scale * omega
    nonlinearity = 100 * np.abs((voltage - ideal_voltage) / ideal_voltage)
    avg_nonlinearity = np.mean(nonlinearity)

    # –ê—Å–∏–º–º–µ—Ç—Ä–∏—è
    pos = scale[omega > 0]
    neg = scale[omega < 0]
    asymmetry = 100 * np.abs(np.mean(pos) - np.mean(neg)) / avg_scale

    # –°–º–µ—â–µ–Ω–∏–µ –Ω—É–ª—è
    bias = voltage[omega == 0]
    if len(bias) > 0:
        zero_offset = np.mean(bias) / avg_scale
    else:
        zero_offset = 0

    # –ì—Ä–∞—Ñ–∏–∫–∏
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.plot(omega, voltage, label="–ò–∑–º–µ—Ä–µ–Ω–∏—è")
    plt.plot(omega, ideal_voltage, label="–ò–¥–µ–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è", linestyle='--')
    plt.xlabel("–£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (¬∞/—Å)")
    plt.ylabel("–í—ã—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–º–í)")
    plt.title("–ú–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç")
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(omega, nonlinearity)
    plt.xlabel("–£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (¬∞/—Å)")
    plt.ylabel("–ù–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å (%)")
    plt.title("–ù–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å –ú–ö")

    plt.tight_layout()
    plt.show()

    return avg_scale, avg_nonlinearity, asymmetry, zero_offset

def process_drift_file(filepath):
    data = np.loadtxt(filepath)
    time = data[:, 0]  # –í—Ä–µ–º—è (—Å–µ–∫)
    rate = data[:, 1]  # –£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (¬∞/—Å)

    # –°–º–µ—â–µ–Ω–∏–µ –Ω—É–ª—è
    bias = np.mean(rate)

    # –¢—Ä–µ–Ω–¥ ‚Äî –≤ ¬∞/—á/—á
    slope, _ = simple_linear_regression(time, rate)
    trend = slope * 3600  # —Ç.–∫. 1 —á = 3600 —Å–µ–∫

    # –ì—Ä–∞—Ñ–∏–∫ –¥—Ä–µ–π—Ñ–∞
    plt.figure(figsize=(8, 4))
    plt.plot(time, rate, label="–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
    plt.plot(time, slope * time + bias, linestyle='--', label="–¢—Ä–µ–Ω–¥")
    plt.xlabel("–í—Ä–µ–º—è (—Å)")
    plt.ylabel("–£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (¬∞/—Å)")
    plt.title("–î—Ä–µ–π—Ñ –≥–∏—Ä–æ—Å–∫–æ–ø–∞")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    return bias, trend

def select_file(title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª"):
    root = tk.Tk()
    root.withdraw()
    filepath = filedialog.askopenfilename(title=title, filetypes=[("DAT files", "*.dat"), ("All files", "*.*")])
    return filepath

def main():
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ú–ö.dat")
    mk_path = select_file("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –º–∞—Å—à—Ç–∞–±–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º (–ú–ö.dat)")
    if not mk_path:
        print("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    scale, nonlinearity, asymmetry, bias_offset = process_mk_file(mk_path)
    print(f"\nüìè –ú–∞—Å—à—Ç–∞–±–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {scale:.3f} –º–í/(¬∞/—Å)")
    print(f"üìâ –°—Ä–µ–¥–Ω—è—è –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å: {nonlinearity:.2f}%")
    print(f"‚öñÔ∏è  –ê—Å–∏–º–º–µ—Ç—Ä–∏—è: {asymmetry:.2f}%")
    print(f"üéØ –°–º–µ—â–µ–Ω–∏–µ –Ω—É–ª—è: {bias_offset:.3f} ¬∞/—Å")

    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –î—Ä–µ–π—Ñ.dat")
    drift_path = select_file("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥—Ä–µ–π—Ñ–æ–º (–î—Ä–µ–π—Ñ.dat)")
    if not drift_path:
        print("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    bias, trend = process_drift_file(drift_path)
    print(f"\nüåÄ –°–º–µ—â–µ–Ω–∏–µ –Ω—É–ª—è: {bias:.4f} ¬∞/—Å")
    print(f"üìà –¢—Ä–µ–Ω–¥ (–¥—Ä–µ–π—Ñ): {trend:.4f} ¬∞/—á/—á")

if __name__ == "__main__":
    main()